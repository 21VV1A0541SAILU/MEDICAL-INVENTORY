# -*- coding: utf-8 -*-
"""Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kz5C1OuHsW5Zbsv7hH9WsUD6x9EBzgMI
"""

from google.colab import drive
drive.mount('googledrive')

import pandas as pd
file_path = 'googledrive/MyDrive/Medical Inventory Optimaization Dataset.csv'
data = pd.read_csv(file_path)
#data['Date'] = pd.to_datetime(data['Date'], format='%d-%m-%Y')
print(data.head())

data = data.dropna()

print(data.columns)
features = ['Quantity', 'Final_Cost', 'Final_Sales']
target = 'ReturnQuantity'

X = data[features]
y = data[target]

!pip install scikit-learn
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Split data into training and testing sets

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(f"Model coefficients: {model.coef_}")
print(f"Model intercept: {model.intercept_}")

import statsmodels.api as sm
X_train_const = sm.add_constant(X_train)
ols_model = sm.OLS(y_train, X_train_const).fit()
print(ols_model.summary())

X_test_const = sm.add_constant(X_test)
y_test_pred = ols_model.predict(X_test_const)

from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, y_test_pred)
r2 = r2_score(y_test, y_test_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

optimal_quantity = -model.intercept_ / model.coef_[0]
print(f"Optimal quantity to minimize return quantity: {optimal_quantity}")

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
for feature in features:
    plt.figure(figsize=(8, 6))
    sns.scatterplot(x=data[feature], y=data[target])
    plt.title(f'Scatter plot of {feature} vs. {target}')
    plt.xlabel(feature)
    plt.ylabel(target)
    plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data[features + [target]].corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation heatmap')
plt.show()

# Residual plot
plt.figure(figsize=(8, 6))
sns.residplot(x=y_test, y=y_test_pred, lowess=True, line_kws={'color': 'red', 'lw': 1})
plt.title('Residual plot')
plt.xlabel('Actual Return Quantity')
plt.ylabel('Predicted Return Quantity')
plt.show()

# Plotting the predictions
plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label='Actual', alpha=0.6)
plt.plot(y_test_pred, label='Predicted', alpha=0.6)
plt.title('Actual vs Predicted Return Quantity')
plt.legend()
plt.show()